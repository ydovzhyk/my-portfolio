import { NextResponse } from 'next/server'
import { db } from '../../../lib/firebaseAdmin'
import { openai } from '../../../lib/openai'
import { promptContent } from '../../../utils/data/promtContent'
export async function POST(req) {
  try {
    const body = await req.json()
    const { userId, message, key } = body

    if (!userId || !message || !key) {
      return NextResponse.json({ error: 'Missing fields' }, { status: 400 })
    }

    const chatRef = db.collection('chatHistory').doc(userId)
    const doc = await chatRef.get()
    const existingMessages = doc.exists ? doc.data().messages || [] : []

    // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–µ
    if (!existingMessages.some((m) => m.key === key)) {
      existingMessages.push({ role: 'user', content: message, key })
    }

    // –í–∑—è—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è GPT (10 user + 10 assistant)
    const lastMessages = existingMessages
      .slice(-20)
      .map(({ role, content }) => ({
        role,
        content,
      }))

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ system prompt
    const systemPrompt = {
      role: 'system',
      content: promptContent,
    }

    // –í–∏–∫–ª–∏–∫ GPT —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π SDK
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [systemPrompt, ...lastMessages],
      temperature: 0.7,
    })

    const assistantReply =
      completion.choices?.[0]?.message?.content || 'ü§ñ No reply'

    // –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    existingMessages.push({ role: 'assistant', content: assistantReply, key })

    // –û–Ω–æ–≤–ª—é—î–º–æ Firestore
    await chatRef.set({ messages: existingMessages }, { merge: true })

    return NextResponse.json({ reply: assistantReply })
  } catch (error) {
    console.error('Error in /api/firebase:', error)
    return NextResponse.json(
      { error: 'Internal Server Error', details: error.message },
      { status: 500 }
    )
  }
}

